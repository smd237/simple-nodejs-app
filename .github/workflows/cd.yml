name: CD Pipeline - AWS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'
  EB_APP_NAME: 'simple-nodejs-app'
  EB_ENV_NAME: 'Simple-nodejs-app-env'

jobs:
  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        zip -r app.zip *.js *.json test/ -x "node_modules/*" "*.git*"
        echo "✅ Deployment package created"

    - name: Deploy using AWS CLI
      run: |
        echo "🚀 Starting AWS deployment..."
        
        # Create application version
        VERSION_LABEL="v${{ github.run_number }}-${{ github.sha }}"
        
        # Upload to S3
        aws s3 cp app.zip s3://elasticbeanstalk-${{ env.AWS_REGION }}-568015476897/${{ env.EB_APP_NAME }}/$VERSION_LABEL.zip
        
        # Create application version
        aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APP_NAME }} \
          --version-label $VERSION_LABEL \
          --source-bundle S3Bucket="elasticbeanstalk-${{ env.AWS_REGION }}-568015476897",S3Key="${{ env.EB_APP_NAME }}/$VERSION_LABEL.zip" \
          --region ${{ env.AWS_REGION }}
        
        # Deploy to environment
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APP_NAME }} \
          --environment-name ${{ env.EB_ENV_NAME }} \
          --version-label $VERSION_LABEL \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Deployment initiated"

    - name: Wait for deployment completion
      run: |
        echo "⏳ Waiting for deployment to complete..."
        sleep 60
        
        # Check environment status
        STATUS=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APP_NAME }} \
          --environment-names ${{ env.EB_ENV_NAME }} \
          --query 'Environments[0].Status' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "📊 Environment Status: $STATUS"
        
        # Wait up to 5 minutes for deployment
        for i in {1..10}; do
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APP_NAME }} \
            --environment-names ${{ env.EB_ENV_NAME }} \
            --query 'Environments[0].Health' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          if [ "$HEALTH" = "Green" ]; then
            echo "✅ Deployment completed successfully!"
            break
          fi
          
          echo "⏳ Current health: $HEALTH (waiting...)"
          sleep 30
        done

    - name: Get deployment URL
      run: |
        DEPLOYMENT_URL=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APP_NAME }} \
          --environment-names ${{ env.EB_ENV_NAME }} \
          --query 'Environments[0].CNAME' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "🌐 Application deployed to: $DEPLOYMENT_URL"
        echo "🎉 Your app is live at: http://$DEPLOYMENT_URL"

    - name: Create deployment summary
      run: |
        DEPLOYMENT_URL=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ env.EB_APP_NAME }} \
          --environment-names ${{ env.EB_ENV_NAME }} \
          --query 'Environments[0].CNAME' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "### 🚀 AWS Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "**Live URL:** http://$DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Deployed and Healthy" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
